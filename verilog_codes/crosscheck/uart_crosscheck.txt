// -----------------------------
// Top Module: UART Transceiver Test with 7-Segment Display
// -----------------------------
module invert_uart_transceiver_test_crosscheck #(
    parameter CLK_FREQ  = 50000000,
    parameter BAUD_RATE = 115200
)(
    input  wire        clk,
    input  wire        rst_n,       // Active LOW KEY0
    input  wire        key1_n,      // Active LOW KEY1 (not used now)
    input  wire [3:0]  sw,          // 4 input switches (not used now)
    output wire        txd,
    input  wire        rxd,
    output wire [7:0]  rx_data,
    output wire [7:0]  leds,
    output wire [6:0]  seg          // 7-segment output (a-g)
);

    wire rst = ~rst_n;

    // Baud rate tick
    wire baud_tick;
    reg [15:0] baud_cnt = 0;

    always @(posedge clk or posedge rst) begin
        if (rst)
            baud_cnt <= 0;
        else if (baud_cnt == (CLK_FREQ / BAUD_RATE - 1))
            baud_cnt <= 0;
        else
            baud_cnt <= baud_cnt + 1;
    end
    assign baud_tick = (baud_cnt == 0);

    // UART receiver signals
    wire [7:0] uart_rx_data;
    reg [7:0] rx_data_reg;
    assign rx_data = rx_data_reg;

    // UART receiver
    uart_rx receiver (
        .clk(clk),
        .rst(rst),
        .rx(rxd),
        .baud_tick(baud_tick),
        .data(uart_rx_data)
    );

    // Edge detector for new data (basic method)
    reg [7:0] prev_uart_rx_data;
    wire new_data_received;
    assign new_data_received = (uart_rx_data != prev_uart_rx_data);

    // Transmit logic
    reg tx_start = 0;
    reg [7:0] tx_data;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            prev_uart_rx_data <= 8'h00;
            rx_data_reg       <= 8'h00;
            tx_data           <= 8'h00;
            tx_start          <= 1'b0;
        end else begin
            tx_start <= 1'b0; // default

            if (new_data_received) begin
                prev_uart_rx_data <= uart_rx_data;
                rx_data_reg       <= uart_rx_data;

                // Process: extract lower 4 bits, multiply by 2
                tx_data  <= {4'b0000, uart_rx_data[3:0]} << 1;
                tx_start <= 1'b1; // trigger transmit
            end
        end
    end

    // UART transmitter
    uart_tx transmitter (
        .clk(clk),
        .rst(rst),
        .start(tx_start),
        .data(tx_data),
        .baud_tick(baud_tick),
        .tx(txd)
    );

    // Output to LEDs and 7-segment display
    assign leds = rx_data_reg;
    seg7_decoder seg_driver (
        .bin(rx_data_reg[3:0]),
        .seg(seg)
    );

endmodule
