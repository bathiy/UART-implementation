`timescale 1ns / 1ps

// -----------------------------
// Top Module: UART Transceiver Test with 7-Segment Display
// -----------------------------
module invert_uart_transceiver_test #(
    parameter CLK_FREQ  = 50000000,
    parameter BAUD_RATE = 115200
)(
    input  wire        clk,
    input  wire        rst_n,       // Active LOW KEY0
    input  wire        key1_n,      // Active LOW KEY1 (transmit trigger)
    input  wire [3:0]  sw,          // 4 input switches (high = 1)
    output wire        txd,
    input  wire        rxd,
    output wire [7:0]  rx_data,
    output wire [7:0]  leds,
    output wire [6:0]  seg          // 7-segment output (a-g)
);

    // Invert active-low inputs
    wire rst = ~rst_n;
    wire key1 = ~key1_n;

    // Baud rate tick
    wire baud_tick;
    reg [15:0] baud_cnt = 0;

    // Transmit logic
    reg tx_start;
    reg [7:0] tx_data;

    // Debounce and edge detect key1
    reg [2:0] key1_sync;
    wire key1_pressed;

    always @(posedge clk) begin
        key1_sync <= {key1_sync[1:0], key1};
    end
    assign key1_pressed = (key1_sync[2:1] == 2'b10);

    // Baud tick generator
    always @(posedge clk or posedge rst) begin
        if (rst)
            baud_cnt <= 0;
        else if (baud_cnt == (CLK_FREQ / BAUD_RATE - 1))
            baud_cnt <= 0;
        else
            baud_cnt <= baud_cnt + 1;
    end
    assign baud_tick = (baud_cnt == 0);

    // Transmit start logic
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            tx_start <= 0;
            tx_data  <= 8'h00;
        end else begin
            tx_start <= key1_pressed;
            if (key1_pressed)
                tx_data <= {4'b0000, sw}; // Upper nibble = 0000, lower nibble = switch input
        end
    end

    // UART transmitter
    uart_tx transmitter (
        .clk(clk),
        .rst(rst),
        .start(tx_start),
        .data(tx_data),
        .baud_tick(baud_tick),
        .tx(txd)
    );

    // UART receiver
    uart_rx receiver (
        .clk(clk),
        .rst(rst),
        .rx(rxd),
        .baud_tick(baud_tick),
        .data(rx_data)
    );

    // Output to LEDs
    assign leds = rx_data;

    // Show rx_data[3:0] on 7-segment display
    seg7_decoder seg_driver (
        .bin(rx_data[3:0]),
        .seg(seg)
    );

endmodule

// -----------------------------
// 7-Segment Display Decoder
// -----------------------------
module seg7_decoder (
    input  wire [3:0] bin,
    output reg  [6:0] seg
);
    always @(*) begin
        case (bin)
            4'h0: seg = 7'b1111110;
            4'h1: seg = 7'b0110000;
            4'h2: seg = 7'b1101101;
            4'h3: seg = 7'b1111001;
            4'h4: seg = 7'b0110011;
            4'h5: seg = 7'b1011011;
            4'h6: seg = 7'b1011111;
            4'h7: seg = 7'b1110000;
            4'h8: seg = 7'b1111111;
            4'h9: seg = 7'b1111011;
            4'hA: seg = 7'b1110111;
            4'hB: seg = 7'b0011111;
            4'hC: seg = 7'b1001110;
            4'hD: seg = 7'b0111110;
            4'hE: seg = 7'b1001111;
            4'hF: seg = 7'b1000111;
            default: seg = 7'b0000000;
        endcase
    end
endmodule
